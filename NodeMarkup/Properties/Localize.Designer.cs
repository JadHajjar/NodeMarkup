//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NodeMarkup {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Localize {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Localize() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NodeMarkup.Properties.Localize", typeof(Localize).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Nothing found.
        /// </summary>
        public static string AssetPopup_NothingFound {
            get {
                return ResourceManager.GetString("AssetPopup_NothingFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To be able to set the crosswalk borders, you must have lines started from the same points as the crosswalk.
        /// </summary>
        public static string CrosswalkEditor_BordersWarning {
            get {
                return ResourceManager.GetString("CrosswalkEditor_BordersWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks.
        /// </summary>
        public static string CrosswalkEditor_Crosswalks {
            get {
                return ResourceManager.GetString("CrosswalkEditor_Crosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на crosswalk.
        /// </summary>
        public static string CrossWalkEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("CrossWalkEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на crosswalk.
        /// </summary>
        public static string CrossWalkEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("CrossWalkEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no crosswalks at this intersection yet.
        ///To create a crosswalk hold {0}..
        /// </summary>
        public static string CrosswalkEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("CrosswalkEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the crosswalk&apos;s left border.
        /// </summary>
        public static string CrosswalkEditor_InfoSelectLeftBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_InfoSelectLeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the crosswalk&apos;s right border.
        /// </summary>
        public static string CrosswalkEditor_InfoSelectRightBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_InfoSelectRightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Left border.
        /// </summary>
        public static string CrosswalkEditor_LeftBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_LeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Right border.
        /// </summary>
        public static string CrosswalkEditor_RightBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_RightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chessboard.
        /// </summary>
        public static string CrosswalkStyle_ChessBoard {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ChessBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double zebra.
        /// </summary>
        public static string CrosswalkStyle_DoubleZebra {
            get {
                return ResourceManager.GetString("CrosswalkStyle_DoubleZebra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Existing crosswalk.
        /// </summary>
        public static string CrosswalkStyle_Existent {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Existent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks.
        /// </summary>
        public static string CrosswalkStyle_Group {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Group", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ladder.
        /// </summary>
        public static string CrosswalkStyle_Ladder {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Ladder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel dashed lines.
        /// </summary>
        public static string CrosswalkStyle_ParallelDashedLines {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ParallelDashedLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel solid lines.
        /// </summary>
        public static string CrosswalkStyle_ParallelSolidLines {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ParallelSolidLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset.
        /// </summary>
        public static string CrosswalkStyle_ResetBorder {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ResetBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string CrosswalkStyle_Solid {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Zebra.
        /// </summary>
        public static string CrosswalkStyle_Zebra {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Zebra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activate with key.
        /// </summary>
        public static string EarlyAccess_ActivateButton {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivateButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activation failed.
        /// </summary>
        public static string EarlyAccess_ActivationFailed {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activation success.
        /// </summary>
        public static string EarlyAccess_ActivationSuccess {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This function is unavailable.
        /// </summary>
        public static string EarlyAccess_FunctionUnavailableCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_FunctionUnavailableCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Function «{0}» is currently only available for Patreons early access.
        ///It will be available to everyone later.
        ///By registering early access, you will support the ability to develop this mod at the same speed..
        /// </summary>
        public static string EarlyAccess_FunctionUnavailableMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_FunctionUnavailableMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Get early access.
        /// </summary>
        public static string EarlyAccess_GetButton {
            get {
                return ResourceManager.GetString("EarlyAccess_GetButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your access ID.
        /// </summary>
        public static string EarlyAccess_ID {
            get {
                return ResourceManager.GetString("EarlyAccess_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Access key.
        /// </summary>
        public static string EarlyAccess_Key {
            get {
                return ResourceManager.GetString("EarlyAccess_Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activate.
        /// </summary>
        public static string EarlyAccess_KeyActivateButton {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivateButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Early access activation.
        /// </summary>
        public static string EarlyAccess_KeyActivationCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivationCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To activate early access you need to enter a key.
        /// </summary>
        public static string EarlyAccess_KeyActivationMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        public static string EarlyAccess_KeyCancelButton {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyCancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The key you entered is not valid.
        /// </summary>
        public static string EarlyAccess_KeyNotValid {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link in process....
        /// </summary>
        public static string EarlyAccess_LinkInProcess {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkInProcess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link Patreon account.
        /// </summary>
        public static string EarlyAccess_LinkPatreonButton {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkPatreonButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link Patreon account.
        /// </summary>
        public static string EarlyAccess_LinkPatreonCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkPatreonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Patreon account can&apos;t be linked because you denied access request..
        /// </summary>
        public static string EarlyAccess_PatreonCantLinked {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonCantLinked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An error occurred when linking the account, try again..
        /// </summary>
        public static string EarlyAccess_PatreonLinkedError {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonLinkedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your account is linked, but you don&apos;t have early access..
        /// </summary>
        public static string EarlyAccess_PatreonLinkedNotMember {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonLinkedNotMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You can close this page and return to the game..
        /// </summary>
        public static string EarlyAccess_PatreonRedirect {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonRedirect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        public static string EarlyAccess_ProcessCancel {
            get {
                return ResourceManager.GetString("EarlyAccess_ProcessCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Status: {0}.
        /// </summary>
        public static string EarlyAccess_Status {
            get {
                return ResourceManager.GetString("EarlyAccess_Status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activated.
        /// </summary>
        public static string EarlyAccess_StatusActivated {
            get {
                return ResourceManager.GetString("EarlyAccess_StatusActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not activated.
        /// </summary>
        public static string EarlyAccess_StatusNotActivated {
            get {
                return ResourceManager.GetString("EarlyAccess_StatusNotActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Thank you for your support, now you can enjoy all the features..
        /// </summary>
        public static string EarlyAccess_ThanksMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_ThanksMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy.
        /// </summary>
        public static string Editor_ColorCopy {
            get {
                return ResourceManager.GetString("Editor_ColorCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Default.
        /// </summary>
        public static string Editor_ColorDefault {
            get {
                return ResourceManager.GetString("Editor_ColorDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste.
        /// </summary>
        public static string Editor_ColorPaste {
            get {
                return ResourceManager.GetString("Editor_ColorPaste", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Less options.
        /// </summary>
        public static string Editor_LessOptions {
            get {
                return ResourceManager.GetString("Editor_LessOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на More options.
        /// </summary>
        public static string Editor_MoreOptions {
            get {
                return ResourceManager.GetString("Editor_MoreOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Style.
        /// </summary>
        public static string Editor_Style {
            get {
                return ResourceManager.GetString("Editor_Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на filler.
        /// </summary>
        public static string FillerEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("FillerEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на filler.
        /// </summary>
        public static string FillerEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("FillerEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no fillers at this intersection yet.
        ///To create a filler hold {0} or press {1}..
        /// </summary>
        public static string FillerEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("FillerEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers.
        /// </summary>
        public static string FillerEditor_Fillers {
            get {
                return ResourceManager.GetString("FillerEditor_Fillers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a guide&apos;s first point or line as guide.
        /// </summary>
        public static string FillerEditor_InfoSelectRailFirst {
            get {
                return ResourceManager.GetString("FillerEditor_InfoSelectRailFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a guide&apos;s second point.
        /// </summary>
        public static string FillerEditor_InfoSelectRailSecond {
            get {
                return ResourceManager.GetString("FillerEditor_InfoSelectRailSecond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chevron.
        /// </summary>
        public static string FillerStyle_Chevron {
            get {
                return ResourceManager.GetString("FillerStyle_Chevron", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cliff.
        /// </summary>
        public static string FillerStyle_Cliff {
            get {
                return ResourceManager.GetString("FillerStyle_Cliff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Corner radius.
        /// </summary>
        public static string FillerStyle_CornerRadius {
            get {
                return ResourceManager.GetString("FillerStyle_CornerRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Curb size.
        /// </summary>
        public static string FillerStyle_CurbSize {
            get {
                return ResourceManager.GetString("FillerStyle_CurbSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Elevation.
        /// </summary>
        public static string FillerStyle_Elevation {
            get {
                return ResourceManager.GetString("FillerStyle_Elevation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grass.
        /// </summary>
        public static string FillerStyle_Grass {
            get {
                return ResourceManager.GetString("FillerStyle_Grass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gravel.
        /// </summary>
        public static string FillerStyle_Gravel {
            get {
                return ResourceManager.GetString("FillerStyle_Gravel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grid.
        /// </summary>
        public static string FillerStyle_Grid {
            get {
                return ResourceManager.GetString("FillerStyle_Grid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers.
        /// </summary>
        public static string FillerStyle_Group {
            get {
                return ResourceManager.GetString("FillerStyle_Group", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Corner radius on medians.
        /// </summary>
        public static string FillerStyle_MedianCornerRadius {
            get {
                return ResourceManager.GetString("FillerStyle_MedianCornerRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Curb size on medians.
        /// </summary>
        public static string FillerStyle_MedianCurbSize {
            get {
                return ResourceManager.GetString("FillerStyle_MedianCurbSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pavement.
        /// </summary>
        public static string FillerStyle_Pavement {
            get {
                return ResourceManager.GetString("FillerStyle_Pavement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ruined.
        /// </summary>
        public static string FillerStyle_Ruined {
            get {
                return ResourceManager.GetString("FillerStyle_Ruined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string FillerStyle_Solid {
            get {
                return ResourceManager.GetString("FillerStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stripes.
        /// </summary>
        public static string FillerStyle_Stripe {
            get {
                return ResourceManager.GetString("FillerStyle_Stripe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply template.
        /// </summary>
        public static string HeaderPanel_ApplyTemplate {
            get {
                return ResourceManager.GetString("HeaderPanel_ApplyTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cut lines by this crosswalk.
        /// </summary>
        public static string HeaderPanel_CutLinesByCrosswalk {
            get {
                return ResourceManager.GetString("HeaderPanel_CutLinesByCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Discard.
        /// </summary>
        public static string HeaderPanel_Discard {
            get {
                return ResourceManager.GetString("HeaderPanel_Discard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Duplicate.
        /// </summary>
        public static string HeaderPanel_Duplicate {
            get {
                return ResourceManager.GetString("HeaderPanel_Duplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edit.
        /// </summary>
        public static string HeaderPanel_Edit {
            get {
                return ResourceManager.GetString("HeaderPanel_Edit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No presets.
        /// </summary>
        public static string HeaderPanel_NoPresets {
            get {
                return ResourceManager.GetString("HeaderPanel_NoPresets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No templates.
        /// </summary>
        public static string HeaderPanel_NoTemplates {
            get {
                return ResourceManager.GetString("HeaderPanel_NoTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Don&apos;t save changes.
        /// </summary>
        public static string HeaderPanel_NotSave {
            get {
                return ResourceManager.GetString("HeaderPanel_NotSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save changes.
        /// </summary>
        public static string HeaderPanel_Save {
            get {
                return ResourceManager.GetString("HeaderPanel_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save as asset.
        /// </summary>
        public static string HeaderPanel_SaveAsAsset {
            get {
                return ResourceManager.GetString("HeaderPanel_SaveAsAsset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save as template.
        /// </summary>
        public static string HeaderPanel_SaveAsTemplate {
            get {
                return ResourceManager.GetString("HeaderPanel_SaveAsTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Set as default.
        /// </summary>
        public static string HeaderPanel_SetAsDefault {
            get {
                return ResourceManager.GetString("HeaderPanel_SetAsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy.
        /// </summary>
        public static string HeaderPanel_StyleCopy {
            get {
                return ResourceManager.GetString("HeaderPanel_StyleCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste.
        /// </summary>
        public static string HeaderPanel_StylePaste {
            get {
                return ResourceManager.GetString("HeaderPanel_StylePaste", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unset as default.
        /// </summary>
        public static string HeaderPanel_UnsetAsDefault {
            get {
                return ResourceManager.GetString("HeaderPanel_UnsetAsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add Rule.
        /// </summary>
        public static string LineEditor_AddRuleButton {
            get {
                return ResourceManager.GetString("LineEditor_AddRuleButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clip sidewalk.
        /// </summary>
        public static string LineEditor_ClipSidewalk {
            get {
                return ResourceManager.GetString("LineEditor_ClipSidewalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на line.
        /// </summary>
        public static string LineEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("LineEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на line.
        /// </summary>
        public static string LineEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("LineEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete rule.
        /// </summary>
        public static string LineEditor_DeleteRuleCaption {
            get {
                return ResourceManager.GetString("LineEditor_DeleteRuleCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to delete the rule?.
        /// </summary>
        public static string LineEditor_DeleteRuleMessage {
            get {
                return ResourceManager.GetString("LineEditor_DeleteRuleMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no lines at this intersection yet.
        ///To create a line connect two points..
        /// </summary>
        public static string LineEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("LineEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the rule&apos;s &quot;From&quot; point.
        /// </summary>
        public static string LineEditor_InfoSelectFrom {
            get {
                return ResourceManager.GetString("LineEditor_InfoSelectFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the rule&apos;s &quot;To&quot; point.
        /// </summary>
        public static string LineEditor_InfoSelectTo {
            get {
                return ResourceManager.GetString("LineEditor_InfoSelectTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line alignment.
        /// </summary>
        public static string LineEditor_LineAlignment {
            get {
                return ResourceManager.GetString("LineEditor_LineAlignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line end alignment.
        /// </summary>
        public static string LineEditor_LineEndAlignment {
            get {
                return ResourceManager.GetString("LineEditor_LineEndAlignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lines.
        /// </summary>
        public static string LineEditor_Lines {
            get {
                return ResourceManager.GetString("LineEditor_Lines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line start alignment.
        /// </summary>
        public static string LineEditor_LineStartAlignment {
            get {
                return ResourceManager.GetString("LineEditor_LineStartAlignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This line type doesn&apos;t support rules.
        /// </summary>
        public static string LineEditor_NotSupportRules {
            get {
                return ResourceManager.GetString("LineEditor_NotSupportRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This rule is overlapped by another rule.
        ///Check the other rule&apos;s &quot;From&quot; and &quot;To&quot; points..
        /// </summary>
        public static string LineEditor_RuleOverlappedWarning {
            get {
                return ResourceManager.GetString("LineEditor_RuleOverlappedWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You must have lines that intersect with this line to be able to change the rule&apos;s &quot;From&quot; and &quot;To&quot; points and create additional rules..
        /// </summary>
        public static string LineEditor_RulesWarning {
            get {
                return ResourceManager.GetString("LineEditor_RulesWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на From.
        /// </summary>
        public static string LineRule_From {
            get {
                return ResourceManager.GetString("LineRule_From", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Intersection with {0}.
        /// </summary>
        public static string LineRule_IntersectWith {
            get {
                return ResourceManager.GetString("LineRule_IntersectWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk&apos;s left border.
        /// </summary>
        public static string LineRule_LeftBorder {
            get {
                return ResourceManager.GetString("LineRule_LeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk&apos;s right border.
        /// </summary>
        public static string LineRule_RightBorder {
            get {
                return ResourceManager.GetString("LineRule_RightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Self-edge point {0}.
        /// </summary>
        public static string LineRule_SelfEdgePoint {
            get {
                return ResourceManager.GetString("LineRule_SelfEdgePoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To.
        /// </summary>
        public static string LineRule_To {
            get {
                return ResourceManager.GetString("LineRule_To", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk lines.
        /// </summary>
        public static string LineStyle_CrosswalkLinesGroup {
            get {
                return ResourceManager.GetString("LineStyle_CrosswalkLinesGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dashed.
        /// </summary>
        public static string LineStyle_Dashed {
            get {
                return ResourceManager.GetString("LineStyle_Dashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double dashed.
        /// </summary>
        public static string LineStyle_DoubleDashed {
            get {
                return ResourceManager.GetString("LineStyle_DoubleDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double solid.
        /// </summary>
        public static string LineStyle_DoubleSolid {
            get {
                return ResourceManager.GetString("LineStyle_DoubleSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Elevation.
        /// </summary>
        public static string LineStyle_Elevation {
            get {
                return ResourceManager.GetString("LineStyle_Elevation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Empty.
        /// </summary>
        public static string LineStyle_Empty {
            get {
                return ResourceManager.GetString("LineStyle_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grass.
        /// </summary>
        public static string LineStyle_Grass {
            get {
                return ResourceManager.GetString("LineStyle_Grass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Decorative network.
        /// </summary>
        public static string LineStyle_Network {
            get {
                return ResourceManager.GetString("LineStyle_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pavement.
        /// </summary>
        public static string LineStyle_Pavement {
            get {
                return ResourceManager.GetString("LineStyle_Pavement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Prop.
        /// </summary>
        public static string LineStyle_Prop {
            get {
                return ResourceManager.GetString("LineStyle_Prop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Regular lines.
        /// </summary>
        public static string LineStyle_RegularLinesGroup {
            get {
                return ResourceManager.GetString("LineStyle_RegularLinesGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shark teeth.
        /// </summary>
        public static string LineStyle_SharkTeeth {
            get {
                return ResourceManager.GetString("LineStyle_SharkTeeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string LineStyle_Solid {
            get {
                return ResourceManager.GetString("LineStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid and Dashed.
        /// </summary>
        public static string LineStyle_SolidAndDashed {
            get {
                return ResourceManager.GetString("LineStyle_SolidAndDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dashed.
        /// </summary>
        public static string LineStyle_StopDashed {
            get {
                return ResourceManager.GetString("LineStyle_StopDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double solid.
        /// </summary>
        public static string LineStyle_StopDouble {
            get {
                return ResourceManager.GetString("LineStyle_StopDouble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double dashed.
        /// </summary>
        public static string LineStyle_StopDoubleDashed {
            get {
                return ResourceManager.GetString("LineStyle_StopDoubleDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stop lines.
        /// </summary>
        public static string LineStyle_StopLinesGroup {
            get {
                return ResourceManager.GetString("LineStyle_StopLinesGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Pavement.
        /// </summary>
        public static string LineStyle_StopPavement {
            get {
                return ResourceManager.GetString("LineStyle_StopPavement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shark teeth.
        /// </summary>
        public static string LineStyle_StopSharkTeeth {
            get {
                return ResourceManager.GetString("LineStyle_StopSharkTeeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string LineStyle_StopSolid {
            get {
                return ResourceManager.GetString("LineStyle_StopSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid and dashed.
        /// </summary>
        public static string LineStyle_StopSolidAndDashed {
            get {
                return ResourceManager.GetString("LineStyle_StopSolidAndDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tree.
        /// </summary>
        public static string LineStyle_Tree {
            get {
                return ResourceManager.GetString("LineStyle_Tree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This action cannot be undone..
        /// </summary>
        public static string MessageBox_CantUndone {
            get {
                return ResourceManager.GetString("MessageBox_CantUndone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на It will replace the existing markings..
        /// </summary>
        public static string MessageBox_ItWillReplace {
            get {
                return ResourceManager.GetString("MessageBox_ItWillReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Just do make markings at intersections.
        /// </summary>
        public static string Mod_Description {
            get {
                return ResourceManager.GetString("Mod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Load was completed with errors.
        ///Failed to load markings for {0} intersections..
        /// </summary>
        public static string Mod_LoadFailed {
            get {
                return ResourceManager.GetString("Mod_LoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Load was completed with errors.
        ///Failed to load markings for all intersections..
        /// </summary>
        public static string Mod_LoadFailedAll {
            get {
                return ResourceManager.GetString("Mod_LoadFailedAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] &quot;What`s New&quot; message will pop-up one time after an update and can be disabled in the Options menu.
        ///[TRANSLATION] Added the following translations:  Czech, Dutch, French, German, Japanese, Polish, Russian, and Spanish.
        ///[NEW] End Points can now be dragged from one to another by holding Ctrl.
        ///[NEW] Backups - In the Options menu the marking data on a map can now be backed up by dumping to a file and then importing it. This is necessary if you need to disable the mod, make a new save without the mod [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added Prop and Tree line styles. They allow place any prop or tree on lines. Those objects are not counted in game prop and tree limits.
        ///[NEW] Added Decorative network line style. It allows place any decorative network like fence on lines. Those networks are not counted in game node and segment limits.
        ///[NEW] Added the ability to use markings on train tracks, metro tracks and pedestrian paths.
        ///[NEW] Added auto applying marking when it is pasted from buffer or preset if target intersection matches so [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_10 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] Auto applying marking is enable only when there is only one posible option to paste marking.
        ///[NEW] Added option &quot;Only direct order&quot; and &quot;Direct and invert order&quot; to auto applying marking.
        ///[FIXED] Fixed fillers calculation and illumination.
        ///[UPDATED] &quot;Default color&quot; button on color selector set default color of style instead of default color of mod..
        /// </summary>
        public static string Mod_WhatsNewMessage1_10_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_10_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] Added Plazas &amp; Promenades DLC support.
        ///[NEW] Added Loading Screen Mod Revisited support.
        ///[FIXED] Fixed UI blinking while searching props/trees/networks..
        /// </summary>
        public static string Mod_WhatsNewMessage1_10_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_10_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Fillers. Space between lines can be filled in to indicate the areas prohibited for stopping or driving. 3 styles are available: Lines, Grid and Solid Fill. To create hold Alt.
        ///[NEW] Stop lines. It is now possible to connect two points on the same road to create a stop line. 2 available styles: &quot;Solid&quot; and &quot;Dashed&quot;.
        ///[NEW] New line style: &quot;Solid &amp; Dashed&quot;.
        ///[NEW] Lines and templates in the list now have icons that show style and colour.
        ///[NEW] Markings will be now copied when the road is copied with M [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [FIXED] Fix hold Alt, Ctrl and Shift buttons on Mac OS and Linux.
        ///[NEW] Added &quot;Double solid&quot; and &quot;Double Dashed&quot; stop line styles.
        ///[TRANSLATION] Added Italian and Portuguese translations..
        /// </summary>
        public static string Mod_WhatsNewMessage1_2_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added new filler style - Chevron (&lt;&lt;&lt;&lt;&lt;).
        ///[NEW] Added crosswalks. Hold Shift to create them. Currently available Styles: &quot;Existing crosswalk&quot;, &quot;Zebra&quot;, &quot;Double Zebra&quot;, &quot;Parallel solid lines&quot;, &quot;Parallel dashed lines&quot;, &quot;Ladder&quot;, &quot;Solid&quot;.
        ///[NEW] Added perpendicular lines. These lines don&apos;t have second point, they are generated as a straight line from one point. To create perpendicular line, pull the line in the opposite direction from the intersection.
        ///[NEW] Added the ability to copy/paste style of lin [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_3 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [WARNING] Default templates setting will be reset.
        ///[NEW] Added the ability to copy/paste marking from one exist intersection to another exist intersection.
        ///[UPDATED] Now the marking is not removed if you replace the road with a different number of points.
        ///[NEW] Added map editor support.
        ///[NEW] Added the ability to save marking data in intersection assets.
        ///[NEW] Added &quot;Shark teeth&quot; line and stop line style.
        ///[NEW] Added &quot;Solid&amp;Dashed&quot; stop line style.
        ///[NEW] Added &quot;Chess board&quot; crosswalk style.
        ///[NEW] Ad [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_4 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added the ability to draw marking under tracks. This can be disabled in the options. WARNING: This option change game objects render order.
        ///[NEW] Added modifier to create a empty line (without rules).
        ///[NEW] Added the ability to create all edge lines at once (line from road last point to next road first point).
        ///[NEW] Lines no longer climb on pavement. Work only for lines from the first or last road point.
        ///[NEW] Added &quot;Quick crosswalk option setup&quot; - automatically open border selection interface aft [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_4_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_4_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added the ability to save whole intersection marking as preset and after apply to any other intersection.
        ///[NEW] Added the ability to save templates and presets as asset and share it over Workshop.
        ///[UPDATED] Updated UI and improved UI performance. Reduced delay when switching tabs and selecting items.
        ///[UPDATED] Now templates values can be changes only in edit mode, what prevents accidental changes to values.
        ///[NEW] Added panel tips (can be disable in settings).
        ///[NEW] Added the ability to cut new li [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_5 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] Improve messages about load data errors.
        ///[FIXED] Fix and update localizes..
        /// </summary>
        public static string Mod_WhatsNewMessage1_5_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_5_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] Update Harmony dependence: resolving conflicts with others mods that use it.
        /// </summary>
        public static string Mod_WhatsNewMessage1_5_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_5_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [FIXED] Fixed a situation where markings could disappear from saving.
        /// </summary>
        public static string Mod_WhatsNewMessage1_5_3 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_5_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added the ability to make markings on segments.
        ///[NEW] Added filler 3D styles: &quot;Pavement&quot; and &quot;Grass&quot;.
        ///[NEW] Added line 3D style: &quot;Pavement&quot;.
        ///[NEW] Added the ability follow rails to filler styles &quot;Stripes&quot; and &quot;Chevron&quot;.
        ///[NEW] Improve performance by added LOD (Level Of Detail) to markings. The LOD distance is set in the settings.
        ///[NEW] Added support taxiways.
        ///[FIXED] Fixed a conflict with other mods that could cause the tool button to not appear.
        ///[FIXED] Fixed a conflict with scroll panel and sc [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_6 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] New node/segment selection mode. The selection area exactly follows the actual shapes of the nodes and segments that prevents difficulties with selecting too close together nodes.
        ///[NEW] Added automatic line creation when create filler. No more need add lines before create filler.
        ///[NEW] Added the ability to split point to two virtual points, set split shift and choose lines alignment. Now possible continue one double line with two separating single lines.
        ///[NEW] Added style modifier &quot;From clipboard&quot;. [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_7 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added the ability to set alignment for stop lines.
        ///[NEW] Additional templates sort: 
        ///---1 - Default templates sorted by type
        ///---2 - Other templates sorted by type then by name
        ///---3 - Other author templates sort by author name then by type then by name
        ///[FIXED] Fix load segment presets.
        ///[FIXED] Fix default panel size..
        /// </summary>
        public static string Mod_WhatsNewMessage1_7_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_7_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [FIXED] Fix 3D fillers height outside available tiles.
        ///[FIXED] Fix creating button duplicates..
        /// </summary>
        public static string Mod_WhatsNewMessage1_7_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_7_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added missing dependencies checker.
        ///[FIXED] Fix 3D fillers height on nodes outside available tiles..
        /// </summary>
        public static string Mod_WhatsNewMessage1_7_3 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_7_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [FIXED] Fixed save and load presets&apos; screenshot.
        ///[FIXED] Fixed bug when nodes with marking after loading had a wrong shape.
        ///[TRANSLATION] Added Indonesian translation..
        /// </summary>
        public static string Mod_WhatsNewMessage1_7_4 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_7_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added selection step over like in MoveIt. Press Ctrl+Space to step over (you can rebind in mod options).
        ///[NEW] Added curbs to filler 3D styles.
        ///[NEW] Added rounded corners to filler 3D styles.
        ///[NEW] Added offset from lines to filler 3D styles.
        ///[NEW] Added filler styles: Gravel, Ruined, Cliff.
        ///[NEW] Added pavement stop line style.
        ///[NEW] Added option &quot;Follow guide lines&quot; for solid filler, so now possible make solid fillers on sloped segments.
        ///[NEW] Added the ability to click with Ctrl to select l [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_8 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [UPDATED] Buttons on paste mode moved ouside of circle.
        ///[TRANSLATION] Added Korean translation..
        /// </summary>
        public static string Mod_WhatsNewMessage1_8_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_8_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added discard button after create template/preset.
        ///[NEW] Added colored text to tooltips.
        ///[NEW] Added the ability to hide original mod button in toolbar If you use UUI mod.
        ///[FIXED] Fixed not removed items from list when this items were removed.
        ///[FIXED] Fixed line grouping.
        ///[TRANSLATION] Added Turkish translation..
        /// </summary>
        public static string Mod_WhatsNewMessage1_8_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_8_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на [NEW] Added the ability to save points offset values for each roads.
        ///[NEW] Added gap option to zebra and double zebra crosswalk styles. It allows to set different space each N dashes.
        ///[NEW] Added intersection points to lines from one splited point with different alignment.
        ///[NEW] Added settings of sorting templates, presets and applying list.
        ///[NEW] Added template grouping by fit (Perfect/Close/Possible/Poor).
        ///[NEW] Added illumination to marking while editing at night.
        ///[NEW] Added illumination to cursor [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_9 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}°.
        /// </summary>
        public static string NumberFormat_Degree {
            get {
                return ResourceManager.GetString("NumberFormat_Degree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}m.
        /// </summary>
        public static string NumberFormat_Meter {
            get {
                return ResourceManager.GetString("NumberFormat_Meter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}%.
        /// </summary>
        public static string NumberFormat_Percent {
            get {
                return ResourceManager.GetString("NumberFormat_Percent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply between intersections.
        /// </summary>
        public static string Panel_ApplyBetweenIntersections {
            get {
                return ResourceManager.GetString("Panel_ApplyBetweenIntersections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply to whole street.
        /// </summary>
        public static string Panel_ApplyWholeStreet {
            get {
                return ResourceManager.GetString("Panel_ApplyWholeStreet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clear markings.
        /// </summary>
        public static string Panel_ClearMarking {
            get {
                return ResourceManager.GetString("Panel_ClearMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy markings.
        /// </summary>
        public static string Panel_CopyMarking {
            get {
                return ResourceManager.GetString("Panel_CopyMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Create edge lines.
        /// </summary>
        public static string Panel_CreateEdgeLines {
            get {
                return ResourceManager.GetString("Panel_CreateEdgeLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cut lines by all crosswalks.
        /// </summary>
        public static string Panel_CutLinesByCrosswalks {
            get {
                return ResourceManager.GetString("Panel_CutLinesByCrosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edit markings order.
        /// </summary>
        public static string Panel_EditMarking {
            get {
                return ResourceManager.GetString("Panel_EditMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edit node #{0} markings.
        /// </summary>
        public static string Panel_NodeCaption {
            get {
                return ResourceManager.GetString("Panel_NodeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste markings.
        /// </summary>
        public static string Panel_PasteMarking {
            get {
                return ResourceManager.GetString("Panel_PasteMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset all points offset.
        /// </summary>
        public static string Panel_ResetOffset {
            get {
                return ResourceManager.GetString("Panel_ResetOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save as preset.
        /// </summary>
        public static string Panel_SaveAsPreset {
            get {
                return ResourceManager.GetString("Panel_SaveAsPreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edit segment #{0} markings.
        /// </summary>
        public static string Panel_SegmentCaption {
            get {
                return ResourceManager.GetString("Panel_SegmentCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на point.
        /// </summary>
        public static string PointEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("PointEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на point.
        /// </summary>
        public static string PointEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("PointEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset.
        /// </summary>
        public static string PointEditor_Offset {
            get {
                return ResourceManager.GetString("PointEditor_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Points.
        /// </summary>
        public static string PointEditor_Points {
            get {
                return ResourceManager.GetString("PointEditor_Points", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Revert offsets.
        /// </summary>
        public static string PointEditor_RevertOffsets {
            get {
                return ResourceManager.GetString("PointEditor_RevertOffsets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Road name.
        /// </summary>
        public static string PointEditor_RoadName {
            get {
                return ResourceManager.GetString("PointEditor_RoadName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save offsets.
        /// </summary>
        public static string PointEditor_SaveOffsets {
            get {
                return ResourceManager.GetString("PointEditor_SaveOffsets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Split into two.
        /// </summary>
        public static string PointEditor_SplitIntoTwo {
            get {
                return ResourceManager.GetString("PointEditor_SplitIntoTwo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Split offset.
        /// </summary>
        public static string PointEditor_SplitOffset {
            get {
                return ResourceManager.GetString("PointEditor_SplitOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на New preset.
        /// </summary>
        public static string Preset_NewPreset {
            get {
                return ResourceManager.GetString("Preset_NewPreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply preset.
        /// </summary>
        public static string PresetEditor_ApplyPreset {
            get {
                return ResourceManager.GetString("PresetEditor_ApplyPreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на preset.
        /// </summary>
        public static string PresetEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("PresetEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на preset.
        /// </summary>
        public static string PresetEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("PresetEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of presets is empty.
        ///To create a preset, click «{0}» at the panel header..
        /// </summary>
        public static string PresetEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("PresetEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на It can only be deleted from the game content manager..
        /// </summary>
        public static string PresetEditor_IsAssetWarningMessage {
            get {
                return ResourceManager.GetString("PresetEditor_IsAssetWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This preset can&apos;t be modified. It can only be deleted from the game content manager or unsubscribed from on the Steam Workshop..
        /// </summary>
        public static string PresetEditor_IsWorkshopWarningMessage {
            get {
                return ResourceManager.GetString("PresetEditor_IsWorkshopWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name &quot;{0}&quot; is already used by another preset.
        ///Are you sure you want to have multiple presets with the same name?.
        /// </summary>
        public static string PresetEditor_NameExistMessage {
            get {
                return ResourceManager.GetString("PresetEditor_NameExistMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Close fit.
        /// </summary>
        public static string PresetEditor_PresetFit_Close {
            get {
                return ResourceManager.GetString("PresetEditor_PresetFit_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Perfect fit.
        /// </summary>
        public static string PresetEditor_PresetFit_Perfect {
            get {
                return ResourceManager.GetString("PresetEditor_PresetFit_Perfect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Poor fit.
        /// </summary>
        public static string PresetEditor_PresetFit_Poor {
            get {
                return ResourceManager.GetString("PresetEditor_PresetFit_Poor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Possible fit.
        /// </summary>
        public static string PresetEditor_PresetFit_Possible {
            get {
                return ResourceManager.GetString("PresetEditor_PresetFit_Possible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This preset is an asset..
        /// </summary>
        public static string PresetEditor_PresetIsAsset {
            get {
                return ResourceManager.GetString("PresetEditor_PresetIsAsset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Presets.
        /// </summary>
        public static string PresetEditor_Presets {
            get {
                return ResourceManager.GetString("PresetEditor_Presets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rewrite preset asset.
        /// </summary>
        public static string PresetEditor_RewriteCaption {
            get {
                return ResourceManager.GetString("PresetEditor_RewriteCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To change its name requires rewriting the asset file. Continue?.
        /// </summary>
        public static string PresetEditor_RewriteMessage {
            get {
                return ResourceManager.GetString("PresetEditor_RewriteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you want to save preset name change?.
        /// </summary>
        public static string PresetEditor_SaveChangesMessage {
            get {
                return ResourceManager.GetString("PresetEditor_SaveChangesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks:.
        /// </summary>
        public static string PresetInfo_Crosswalks {
            get {
                return ResourceManager.GetString("PresetInfo_Crosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers:.
        /// </summary>
        public static string PresetInfo_Fillers {
            get {
                return ResourceManager.GetString("PresetInfo_Fillers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lines:.
        /// </summary>
        public static string PresetInfo_Lines {
            get {
                return ResourceManager.GetString("PresetInfo_Lines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No screenshot.
        /// </summary>
        public static string PresetInfo_NoScreenshot {
            get {
                return ResourceManager.GetString("PresetInfo_NoScreenshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Road #{0} points:.
        /// </summary>
        public static string PresetInfo_RoadPoints {
            get {
                return ResourceManager.GetString("PresetInfo_RoadPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Roads:.
        /// </summary>
        public static string PresetInfo_Roads {
            get {
                return ResourceManager.GetString("PresetInfo_Roads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not set.
        /// </summary>
        public static string SelectPanel_NotSet {
            get {
                return ResourceManager.GetString("SelectPanel_NotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Applies after game restart.
        /// </summary>
        public static string Settings_ApplyAfterRestart {
            get {
                return ResourceManager.GetString("Settings_ApplyAfterRestart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto apply marking pasting if the source matches the target.
        /// </summary>
        public static string Settings_AutoApplyPasting {
            get {
                return ResourceManager.GetString("Settings_AutoApplyPasting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Direct and Invert order.
        /// </summary>
        public static string Settings_AutoApplyPastingDirectAndInvert {
            get {
                return ResourceManager.GetString("Settings_AutoApplyPastingDirectAndInvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Only direct order.
        /// </summary>
        public static string Settings_AutoApplyPastingDirectOnly {
            get {
                return ResourceManager.GetString("Settings_AutoApplyPastingDirectOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto prop step depends on its size.
        /// </summary>
        public static string Settings_AutoPropStep {
            get {
                return ResourceManager.GetString("Settings_AutoPropStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Backup markings.
        /// </summary>
        public static string Settings_BackupMarking {
            get {
                return ResourceManager.GetString("Settings_BackupMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Backup presets.
        /// </summary>
        public static string Settings_BackupPresets {
            get {
                return ResourceManager.GetString("Settings_BackupPresets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Backup.
        /// </summary>
        public static string Settings_BackupTab {
            get {
                return ResourceManager.GetString("Settings_BackupTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Backup templates.
        /// </summary>
        public static string Settings_BackupTemplates {
            get {
                return ResourceManager.GetString("Settings_BackupTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Collapse additional style options.
        /// </summary>
        public static string Settings_CollapseOptions {
            get {
                return ResourceManager.GetString("Settings_CollapseOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy path to clipboard.
        /// </summary>
        public static string Settings_CopyPathToClipboard {
            get {
                return ResourceManager.GetString("Settings_CopyPathToClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks modifier.
        /// </summary>
        public static string Settings_CrosswalksModifier {
            get {
                return ResourceManager.GetString("Settings_CrosswalksModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cut new line by crosswalks.
        /// </summary>
        public static string Settings_CutLineByCrosswalk {
            get {
                return ResourceManager.GetString("Settings_CutLineByCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete markings from all intersections.
        /// </summary>
        public static string Settings_DeleteMarkingButton {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all markings.
        /// </summary>
        public static string Settings_DeleteMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to remove all markings?.
        /// </summary>
        public static string Settings_DeleteMarkingMessage {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all presets.
        /// </summary>
        public static string Settings_DeletePresetsButton {
            get {
                return ResourceManager.GetString("Settings_DeletePresetsButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all presets.
        /// </summary>
        public static string Settings_DeletePresetsCaption {
            get {
                return ResourceManager.GetString("Settings_DeletePresetsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to remove all presets?.
        /// </summary>
        public static string Settings_DeletePresetsMessage {
            get {
                return ResourceManager.GetString("Settings_DeletePresetsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all templates.
        /// </summary>
        public static string Settings_DeleteTemplatesButton {
            get {
                return ResourceManager.GetString("Settings_DeleteTemplatesButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all templates.
        /// </summary>
        public static string Settings_DeleteTemplatesCaption {
            get {
                return ResourceManager.GetString("Settings_DeleteTemplatesCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to remove all templates?.
        /// </summary>
        public static string Settings_DeleteTemplatesMessage {
            get {
                return ResourceManager.GetString("Settings_DeleteTemplatesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Display and usage.
        /// </summary>
        public static string Settings_DisplayAndUsage {
            get {
                return ResourceManager.GetString("Settings_DisplayAndUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Don&apos;t cut line by crosswalk if it is their border.
        /// </summary>
        public static string Settings_DontCutBorderByCrosswalk {
            get {
                return ResourceManager.GetString("Settings_DontCutBorderByCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump markings data to file.
        /// </summary>
        public static string Settings_DumpMarkingButton {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump markings data.
        /// </summary>
        public static string Settings_DumpMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump failed.
        /// </summary>
        public static string Settings_DumpMessageFailed {
            get {
                return ResourceManager.GetString("Settings_DumpMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump successfully saved to file.
        /// </summary>
        public static string Settings_DumpMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_DumpMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump presets to file.
        /// </summary>
        public static string Settings_DumpPresetsButton {
            get {
                return ResourceManager.GetString("Settings_DumpPresetsButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump presets.
        /// </summary>
        public static string Settings_DumpPresetsCaption {
            get {
                return ResourceManager.GetString("Settings_DumpPresetsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump templates to file.
        /// </summary>
        public static string Settings_DumpTemplatesButton {
            get {
                return ResourceManager.GetString("Settings_DumpTemplatesButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump templates.
        /// </summary>
        public static string Settings_DumpTemplatesCaption {
            get {
                return ResourceManager.GetString("Settings_DumpTemplatesCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Early access.
        /// </summary>
        public static string Settings_EarlyAccess {
            get {
                return ResourceManager.GetString("Settings_EarlyAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers modifier.
        /// </summary>
        public static string Settings_FillersModifier {
            get {
                return ResourceManager.GetString("Settings_FillersModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gameplay.
        /// </summary>
        public static string Settings_Gameplay {
            get {
                return ResourceManager.GetString("Settings_Gameplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Groupings.
        /// </summary>
        public static string Settings_Groupings {
            get {
                return ResourceManager.GetString("Settings_Groupings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group lines.
        /// </summary>
        public static string Settings_GroupLines {
            get {
                return ResourceManager.GetString("Settings_GroupLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group points.
        /// </summary>
        public static string Settings_GroupPoints {
            get {
                return ResourceManager.GetString("Settings_GroupPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arrange in a circle.
        /// </summary>
        public static string Settings_GroupPointsArrangeCircle {
            get {
                return ResourceManager.GetString("Settings_GroupPointsArrangeCircle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arrange in a line.
        /// </summary>
        public static string Settings_GroupPointsArrangeLine {
            get {
                return ResourceManager.GetString("Settings_GroupPointsArrangeLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group points overlay.
        /// </summary>
        public static string Settings_GroupPointsOverlay {
            get {
                return ResourceManager.GetString("Settings_GroupPointsOverlay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group presets.
        /// </summary>
        public static string Settings_GroupPresets {
            get {
                return ResourceManager.GetString("Settings_GroupPresets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group templates.
        /// </summary>
        public static string Settings_GroupTemplates {
            get {
                return ResourceManager.GetString("Settings_GroupTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By style.
        /// </summary>
        public static string Settings_GroupTemplatesByStyle {
            get {
                return ResourceManager.GetString("Settings_GroupTemplatesByStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By type.
        /// </summary>
        public static string Settings_GroupTemplatesByType {
            get {
                return ResourceManager.GetString("Settings_GroupTemplatesByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hide street names while using tool.
        /// </summary>
        public static string Settings_HideStreetName {
            get {
                return ResourceManager.GetString("Settings_HideStreetName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Illumination of editing marking at night.
        /// </summary>
        public static string Settings_IlluminationAtNight {
            get {
                return ResourceManager.GetString("Settings_IlluminationAtNight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Illumination intensity.
        /// </summary>
        public static string Settings_IlluminationIntensity {
            get {
                return ResourceManager.GetString("Settings_IlluminationIntensity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Markings under level crossings.
        /// </summary>
        public static string Settings_LevelCrossingUnderMarking {
            get {
                return ResourceManager.GetString("Settings_LevelCrossingUnderMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Load markings assets.
        /// </summary>
        public static string Settings_LoadMarkingAssets {
            get {
                return ResourceManager.GetString("Settings_LoadMarkingAssets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на LOD distance.
        /// </summary>
        public static string Settings_LODDistance {
            get {
                return ResourceManager.GetString("Settings_LODDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 2D Marking LOD distance.
        /// </summary>
        public static string Settings_LODDistanceMarking {
            get {
                return ResourceManager.GetString("Settings_LODDistanceMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 3D Marking LOD distance.
        /// </summary>
        public static string Settings_LODDistanceMesh {
            get {
                return ResourceManager.GetString("Settings_LODDistanceMesh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Network LOD distance.
        /// </summary>
        public static string Settings_LODDistanceNetwork {
            get {
                return ResourceManager.GetString("Settings_LODDistanceNetwork", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Prop LOD distance.
        /// </summary>
        public static string Settings_LODDistanceProp {
            get {
                return ResourceManager.GetString("Settings_LODDistanceProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tree LOD distance.
        /// </summary>
        public static string Settings_LODDistanceTree {
            get {
                return ResourceManager.GetString("Settings_LODDistanceTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Quick crosswalk borders setup.
        /// </summary>
        public static string Settings_QuickBorderSetup {
            get {
                return ResourceManager.GetString("Settings_QuickBorderSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Quick rule setup.
        /// </summary>
        public static string Settings_QuickRuleSetup {
            get {
                return ResourceManager.GetString("Settings_QuickRuleSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Markings under tracks.
        /// </summary>
        public static string Settings_RailUnderMarking {
            get {
                return ResourceManager.GetString("Settings_RailUnderMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Warning: this option changes game objects render order.
        /// </summary>
        public static string Settings_RailUnderMarkingWarning {
            get {
                return ResourceManager.GetString("Settings_RailUnderMarkingWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Regular lines modifier.
        /// </summary>
        public static string Settings_RegularLinesModifier {
            get {
                return ResourceManager.GetString("Settings_RegularLinesModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Render.
        /// </summary>
        public static string Settings_Render {
            get {
                return ResourceManager.GetString("Settings_Render", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Render distance.
        /// </summary>
        public static string Settings_RenderDistance {
            get {
                return ResourceManager.GetString("Settings_RenderDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore.
        /// </summary>
        public static string Settings_Restore {
            get {
                return ResourceManager.GetString("Settings_Restore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore markings data from file.
        /// </summary>
        public static string Settings_RestoreMarkingButton {
            get {
                return ResourceManager.GetString("Settings_RestoreMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore markings data.
        /// </summary>
        public static string Settings_RestoreMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_RestoreMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to restore markings?
        ///The restored markings will replace all existing markings..
        /// </summary>
        public static string Settings_RestoreMarkingMessage {
            get {
                return ResourceManager.GetString("Settings_RestoreMarkingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Markings data restore failed.
        /// </summary>
        public static string Settings_RestoreMarkingMessageFailed {
            get {
                return ResourceManager.GetString("Settings_RestoreMarkingMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Markings data successfully restored.
        /// </summary>
        public static string Settings_RestoreMarkingMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_RestoreMarkingMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore presets from file.
        /// </summary>
        public static string Settings_RestorePresetsButton {
            get {
                return ResourceManager.GetString("Settings_RestorePresetsButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore presets.
        /// </summary>
        public static string Settings_RestorePresetsCaption {
            get {
                return ResourceManager.GetString("Settings_RestorePresetsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to restore presets?
        ///The restored presets will replace all existing presets..
        /// </summary>
        public static string Settings_RestorePresetsMessage {
            get {
                return ResourceManager.GetString("Settings_RestorePresetsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Presets restore failed.
        /// </summary>
        public static string Settings_RestorePresetsMessageFailed {
            get {
                return ResourceManager.GetString("Settings_RestorePresetsMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Presets successfully restored.
        /// </summary>
        public static string Settings_RestorePresetsMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_RestorePresetsMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore templates from file.
        /// </summary>
        public static string Settings_RestoreTemplatesButton {
            get {
                return ResourceManager.GetString("Settings_RestoreTemplatesButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Restore templates.
        /// </summary>
        public static string Settings_RestoreTemplatesCaption {
            get {
                return ResourceManager.GetString("Settings_RestoreTemplatesCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to restore templates?
        ///The restored templates will replace all existing templates..
        /// </summary>
        public static string Settings_RestoreTemplatesMessage {
            get {
                return ResourceManager.GetString("Settings_RestoreTemplatesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Templates restore failed.
        /// </summary>
        public static string Settings_RestoreTemplatesMessageFailed {
            get {
                return ResourceManager.GetString("Settings_RestoreTemplatesMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Templates successfully restored.
        /// </summary>
        public static string Settings_RestoreTemplatesMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_RestoreTemplatesMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add new filler.
        /// </summary>
        public static string Settings_ShortcutAddNewFiller {
            get {
                return ResourceManager.GetString("Settings_ShortcutAddNewFiller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add new line rule.
        /// </summary>
        public static string Settings_ShortcutAddNewLineRule {
            get {
                return ResourceManager.GetString("Settings_ShortcutAddNewLineRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply between intersections.
        /// </summary>
        public static string Settings_ShortcutApplyBetweenIntersections {
            get {
                return ResourceManager.GetString("Settings_ShortcutApplyBetweenIntersections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply to whole street.
        /// </summary>
        public static string Settings_ShortcutApplyWholeStreet {
            get {
                return ResourceManager.GetString("Settings_ShortcutApplyWholeStreet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy markings.
        /// </summary>
        public static string Settings_ShortcutCopyMarking {
            get {
                return ResourceManager.GetString("Settings_ShortcutCopyMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Create edge lines.
        /// </summary>
        public static string Settings_ShortcutCreateEdgeLines {
            get {
                return ResourceManager.GetString("Settings_ShortcutCreateEdgeLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cut lines by all crosswalks.
        /// </summary>
        public static string Settings_ShortcutCutLinesByCrosswalks {
            get {
                return ResourceManager.GetString("Settings_ShortcutCutLinesByCrosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all node lines.
        /// </summary>
        public static string Settings_ShortcutDeleteAllNodeLines {
            get {
                return ResourceManager.GetString("Settings_ShortcutDeleteAllNodeLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Change markings order.
        /// </summary>
        public static string Settings_ShortcutEditMarking {
            get {
                return ResourceManager.GetString("Settings_ShortcutEditMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Enter underground mode.
        /// </summary>
        public static string Settings_ShortcutEnterUnderground {
            get {
                return ResourceManager.GetString("Settings_ShortcutEnterUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exit underground mode.
        /// </summary>
        public static string Settings_ShortcutExitUnderground {
            get {
                return ResourceManager.GetString("Settings_ShortcutExitUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste markings.
        /// </summary>
        public static string Settings_ShortcutPasteMarking {
            get {
                return ResourceManager.GetString("Settings_ShortcutPasteMarking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset all points offset.
        /// </summary>
        public static string Settings_ShortcutResetPointsOffset {
            get {
                return ResourceManager.GetString("Settings_ShortcutResetPointsOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shortcuts and modifiers.
        /// </summary>
        public static string Settings_ShortcutsAndModifiersTab {
            get {
                return ResourceManager.GetString("Settings_ShortcutsAndModifiersTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save as preset.
        /// </summary>
        public static string Settings_ShortcutSaveAsPreset {
            get {
                return ResourceManager.GetString("Settings_ShortcutSaveAsPreset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Confirm before deleting.
        /// </summary>
        public static string Settings_ShowDeleteWarnings {
            get {
                return ResourceManager.GetString("Settings_ShowDeleteWarnings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Always.
        /// </summary>
        public static string Settings_ShowDeleteWarningsAlways {
            get {
                return ResourceManager.GetString("Settings_ShowDeleteWarningsAlways", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Only if it affects other items.
        /// </summary>
        public static string Settings_ShowDeleteWarningsOnlyDependences {
            get {
                return ResourceManager.GetString("Settings_ShowDeleteWarningsOnlyDependences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show hints on panel.
        /// </summary>
        public static string Settings_ShowPaneltips {
            get {
                return ResourceManager.GetString("Settings_ShowPaneltips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By author, then by type, then by name.
        /// </summary>
        public static string Settings_SortApplyByAuthor {
            get {
                return ResourceManager.GetString("Settings_SortApplyByAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By name, then by type.
        /// </summary>
        public static string Settings_SortApplyByNames {
            get {
                return ResourceManager.GetString("Settings_SortApplyByNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By type, then by name.
        /// </summary>
        public static string Settings_SortApplyByType {
            get {
                return ResourceManager.GetString("Settings_SortApplyByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show default templates at top of apply list.
        /// </summary>
        public static string Settings_SortApplyDefaultFirst {
            get {
                return ResourceManager.GetString("Settings_SortApplyDefaultFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sort templates in apply list.
        /// </summary>
        public static string Settings_SortApplyType {
            get {
                return ResourceManager.GetString("Settings_SortApplyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sortings.
        /// </summary>
        public static string Settings_Sortings {
            get {
                return ResourceManager.GetString("Settings_Sortings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By names.
        /// </summary>
        public static string Settings_SortPresetByNames {
            get {
                return ResourceManager.GetString("Settings_SortPresetByNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By road count, then by names.
        /// </summary>
        public static string Settings_SortPresetByRoadCount {
            get {
                return ResourceManager.GetString("Settings_SortPresetByRoadCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sort presets.
        /// </summary>
        public static string Settings_SortPresetType {
            get {
                return ResourceManager.GetString("Settings_SortPresetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By author, then by type, then by name.
        /// </summary>
        public static string Settings_SortTemplateByAuthor {
            get {
                return ResourceManager.GetString("Settings_SortTemplateByAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By name, then by type.
        /// </summary>
        public static string Settings_SortTemplateByNames {
            get {
                return ResourceManager.GetString("Settings_SortTemplateByNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By type, then by name.
        /// </summary>
        public static string Settings_SortTemplateByType {
            get {
                return ResourceManager.GetString("Settings_SortTemplateByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sort templates.
        /// </summary>
        public static string Settings_SortTemplateType {
            get {
                return ResourceManager.GetString("Settings_SortTemplateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stop lines modifier.
        /// </summary>
        public static string Settings_StopLinesModifier {
            get {
                return ResourceManager.GetString("Settings_StopLinesModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not set.
        /// </summary>
        public static string Settings_StyleModifierNotSet {
            get {
                return ResourceManager.GetString("Settings_StyleModifierNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Without modifier.
        /// </summary>
        public static string Settings_StyleModifierWithout {
            get {
                return ResourceManager.GetString("Settings_StyleModifierWithout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Toogle underground.
        /// </summary>
        public static string Settings_ToggleUnderground {
            get {
                return ResourceManager.GetString("Settings_ToggleUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Press {0} to enter and {1} to exit.
        /// </summary>
        public static string Settings_ToggleUndergroundButtons {
            get {
                return ResourceManager.GetString("Settings_ToggleUndergroundButtons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hold {0}.
        /// </summary>
        public static string Settings_ToggleUndergroundHold {
            get {
                return ResourceManager.GetString("Settings_ToggleUndergroundHold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на From clipboard.
        /// </summary>
        public static string Style_FromClipboard {
            get {
                return ResourceManager.GetString("Style_FromClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Alignment.
        /// </summary>
        public static string StyleOption_Alignment {
            get {
                return ResourceManager.GetString("StyleOption_Alignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Center.
        /// </summary>
        public static string StyleOption_AlignmentCenter {
            get {
                return ResourceManager.GetString("StyleOption_AlignmentCenter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Left.
        /// </summary>
        public static string StyleOption_AlignmentLeft {
            get {
                return ResourceManager.GetString("StyleOption_AlignmentLeft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Right.
        /// </summary>
        public static string StyleOption_AlignmentRight {
            get {
                return ResourceManager.GetString("StyleOption_AlignmentRight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle.
        /// </summary>
        public static string StyleOption_Angle {
            get {
                return ResourceManager.GetString("StyleOption_Angle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle between.
        /// </summary>
        public static string StyleOption_AngleBetween {
            get {
                return ResourceManager.GetString("StyleOption_AngleBetween", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Network asset.
        /// </summary>
        public static string StyleOption_AssetNetwork {
            get {
                return ResourceManager.GetString("StyleOption_AssetNetwork", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not set.
        /// </summary>
        public static string StyleOption_AssetNotSet {
            get {
                return ResourceManager.GetString("StyleOption_AssetNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Prop asset.
        /// </summary>
        public static string StyleOption_AssetProp {
            get {
                return ResourceManager.GetString("StyleOption_AssetProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tree asset.
        /// </summary>
        public static string StyleOption_AssetTree {
            get {
                return ResourceManager.GetString("StyleOption_AssetTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color.
        /// </summary>
        public static string StyleOption_Color {
            get {
                return ResourceManager.GetString("StyleOption_Color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Variant #1.
        /// </summary>
        public static string StyleOption_Color1 {
            get {
                return ResourceManager.GetString("StyleOption_Color1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Variant #2.
        /// </summary>
        public static string StyleOption_Color2 {
            get {
                return ResourceManager.GetString("StyleOption_Color2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Variant #3.
        /// </summary>
        public static string StyleOption_Color3 {
            get {
                return ResourceManager.GetString("StyleOption_Color3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Variant #4.
        /// </summary>
        public static string StyleOption_Color4 {
            get {
                return ResourceManager.GetString("StyleOption_Color4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color count.
        /// </summary>
        public static string StyleOption_ColorCount {
            get {
                return ResourceManager.GetString("StyleOption_ColorCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на One.
        /// </summary>
        public static string StyleOption_ColorCountOne {
            get {
                return ResourceManager.GetString("StyleOption_ColorCountOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Two.
        /// </summary>
        public static string StyleOption_ColorCountTwo {
            get {
                return ResourceManager.GetString("StyleOption_ColorCountTwo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Custom.
        /// </summary>
        public static string StyleOption_ColorCustom {
            get {
                return ResourceManager.GetString("StyleOption_ColorCustom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color variant.
        /// </summary>
        public static string StyleOption_ColorOption {
            get {
                return ResourceManager.GetString("StyleOption_ColorOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Random.
        /// </summary>
        public static string StyleOption_ColorRandom {
            get {
                return ResourceManager.GetString("StyleOption_ColorRandom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dash length.
        /// </summary>
        public static string StyleOption_DashedLength {
            get {
                return ResourceManager.GetString("StyleOption_DashedLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edge.
        /// </summary>
        public static string StyleOption_Edge {
            get {
                return ResourceManager.GetString("StyleOption_Edge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Follow guide.
        /// </summary>
        public static string StyleOption_FollowRails {
            get {
                return ResourceManager.GetString("StyleOption_FollowRails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gap length.
        /// </summary>
        public static string StyleOption_GapLength {
            get {
                return ResourceManager.GetString("StyleOption_GapLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gap period.
        /// </summary>
        public static string StyleOption_GapPeriod {
            get {
                return ResourceManager.GetString("StyleOption_GapPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invert.
        /// </summary>
        public static string StyleOption_Invert {
            get {
                return ResourceManager.GetString("StyleOption_Invert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Left guide.
        /// </summary>
        public static string StyleOption_LeftRail {
            get {
                return ResourceManager.GetString("StyleOption_LeftRail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line count.
        /// </summary>
        public static string StyleOption_LineCount {
            get {
                return ResourceManager.GetString("StyleOption_LineCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset from lines.
        /// </summary>
        public static string StyleOption_LineOffset {
            get {
                return ResourceManager.GetString("StyleOption_LineOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset from lines.
        /// </summary>
        public static string StyleOption_LinesOffset {
            get {
                return ResourceManager.GetString("StyleOption_LinesOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line width.
        /// </summary>
        public static string StyleOption_LineWidth {
            get {
                return ResourceManager.GetString("StyleOption_LineWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Main color.
        /// </summary>
        public static string StyleOption_MainColor {
            get {
                return ResourceManager.GetString("StyleOption_MainColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset from median.
        /// </summary>
        public static string StyleOption_MedianOffset {
            get {
                return ResourceManager.GetString("StyleOption_MedianOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Repeat distance.
        /// </summary>
        public static string StyleOption_NetRepeatDistance {
            get {
                return ResourceManager.GetString("StyleOption_NetRepeatDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Width scale.
        /// </summary>
        public static string StyleOption_NetWidthScale {
            get {
                return ResourceManager.GetString("StyleOption_NetWidthScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No.
        /// </summary>
        public static string StyleOption_No {
            get {
                return ResourceManager.GetString("StyleOption_No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle.
        /// </summary>
        public static string StyleOption_ObjectAngle {
            get {
                return ResourceManager.GetString("StyleOption_ObjectAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Auto.
        /// </summary>
        public static string StyleOption_ObjectAuto {
            get {
                return ResourceManager.GetString("StyleOption_ObjectAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Elevation.
        /// </summary>
        public static string StyleOption_ObjectElevation {
            get {
                return ResourceManager.GetString("StyleOption_ObjectElevation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string StyleOption_ObjectName {
            get {
                return ResourceManager.GetString("StyleOption_ObjectName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Probability.
        /// </summary>
        public static string StyleOption_ObjectProbability {
            get {
                return ResourceManager.GetString("StyleOption_ObjectProbability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Range.
        /// </summary>
        public static string StyleOption_ObjectRange {
            get {
                return ResourceManager.GetString("StyleOption_ObjectRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Scale.
        /// </summary>
        public static string StyleOption_ObjectScale {
            get {
                return ResourceManager.GetString("StyleOption_ObjectScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shift.
        /// </summary>
        public static string StyleOption_ObjectShift {
            get {
                return ResourceManager.GetString("StyleOption_ObjectShift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Single.
        /// </summary>
        public static string StyleOption_ObjectStatic {
            get {
                return ResourceManager.GetString("StyleOption_ObjectStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Step.
        /// </summary>
        public static string StyleOption_ObjectStep {
            get {
                return ResourceManager.GetString("StyleOption_ObjectStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset.
        /// </summary>
        public static string StyleOption_Offset {
            get {
                return ResourceManager.GetString("StyleOption_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset after.
        /// </summary>
        public static string StyleOption_OffsetAfter {
            get {
                return ResourceManager.GetString("StyleOption_OffsetAfter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset before.
        /// </summary>
        public static string StyleOption_OffsetBefore {
            get {
                return ResourceManager.GetString("StyleOption_OffsetBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset between.
        /// </summary>
        public static string StyleOption_OffsetBetween {
            get {
                return ResourceManager.GetString("StyleOption_OffsetBetween", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel to lanes.
        /// </summary>
        public static string StyleOption_ParallelToLanes {
            get {
                return ResourceManager.GetString("StyleOption_ParallelToLanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Right guide.
        /// </summary>
        public static string StyleOption_RightRail {
            get {
                return ResourceManager.GetString("StyleOption_RightRail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Second color.
        /// </summary>
        public static string StyleOption_SecondColor {
            get {
                return ResourceManager.GetString("StyleOption_SecondColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle.
        /// </summary>
        public static string StyleOption_SharkToothAngle {
            get {
                return ResourceManager.GetString("StyleOption_SharkToothAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Triangle base.
        /// </summary>
        public static string StyleOption_SharkToothBase {
            get {
                return ResourceManager.GetString("StyleOption_SharkToothBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Triangle height.
        /// </summary>
        public static string StyleOption_SharkToothHeight {
            get {
                return ResourceManager.GetString("StyleOption_SharkToothHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Space between.
        /// </summary>
        public static string StyleOption_SharkToothSpace {
            get {
                return ResourceManager.GetString("StyleOption_SharkToothSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Slope.
        /// </summary>
        public static string StyleOption_Slope {
            get {
                return ResourceManager.GetString("StyleOption_Slope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid in center.
        /// </summary>
        public static string StyleOption_SolidInCenter {
            get {
                return ResourceManager.GetString("StyleOption_SolidInCenter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Space length.
        /// </summary>
        public static string StyleOption_SpaceLength {
            get {
                return ResourceManager.GetString("StyleOption_SpaceLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Square side.
        /// </summary>
        public static string StyleOption_SquareSide {
            get {
                return ResourceManager.GetString("StyleOption_SquareSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Starting from.
        /// </summary>
        public static string StyleOption_StartingFrom {
            get {
                return ResourceManager.GetString("StyleOption_StartingFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Step.
        /// </summary>
        public static string StyleOption_Step {
            get {
                return ResourceManager.GetString("StyleOption_Step", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Tilt.
        /// </summary>
        public static string StyleOption_Tilt {
            get {
                return ResourceManager.GetString("StyleOption_Tilt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turn.
        /// </summary>
        public static string StyleOption_Turn {
            get {
                return ResourceManager.GetString("StyleOption_Turn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use gap.
        /// </summary>
        public static string StyleOption_UseGap {
            get {
                return ResourceManager.GetString("StyleOption_UseGap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vertex.
        /// </summary>
        public static string StyleOption_Vertex {
            get {
                return ResourceManager.GetString("StyleOption_Vertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Width.
        /// </summary>
        public static string StyleOption_Width {
            get {
                return ResourceManager.GetString("StyleOption_Width", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Yes.
        /// </summary>
        public static string StyleOption_Yes {
            get {
                return ResourceManager.GetString("StyleOption_Yes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy.
        /// </summary>
        public static string Template_DuplicateTemplateSuffix {
            get {
                return ResourceManager.GetString("Template_DuplicateTemplateSuffix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на New template.
        /// </summary>
        public static string Template_NewTemplate {
            get {
                return ResourceManager.GetString("Template_NewTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unknown author.
        /// </summary>
        public static string Template_UnknownAuthor {
            get {
                return ResourceManager.GetString("Template_UnknownAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Author.
        /// </summary>
        public static string TemplateEditor_Author {
            get {
                return ResourceManager.GetString("TemplateEditor_Author", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на template.
        /// </summary>
        public static string TemplateEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("TemplateEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на template.
        /// </summary>
        public static string TemplateEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("TemplateEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of templates is empty.
        ///To create a template, click «{0}» at the line or crosswalk or filler style..
        /// </summary>
        public static string TemplateEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на It can only be deleted from the game content manager..
        /// </summary>
        public static string TemplateEditor_IsAssetWarningMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_IsAssetWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This template can&apos;t be modified. It can only be deleted from the game content manager or unsubscribed from on the Steam Workshop..
        /// </summary>
        public static string TemplateEditor_IsWorkshopWarningMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_IsWorkshopWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string TemplateEditor_Name {
            get {
                return ResourceManager.GetString("TemplateEditor_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name is already used.
        /// </summary>
        public static string TemplateEditor_NameExistCaption {
            get {
                return ResourceManager.GetString("TemplateEditor_NameExistCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The name &quot;{0}&quot; is already used by another template.
        ///Are you sure you want to have multiple templates with the same name?.
        /// </summary>
        public static string TemplateEditor_NameExistMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_NameExistMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rewrite template asset.
        /// </summary>
        public static string TemplateEditor_RewriteCaption {
            get {
                return ResourceManager.GetString("TemplateEditor_RewriteCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To change its name and values requires rewriting the asset file. Continue?.
        /// </summary>
        public static string TemplateEditor_RewriteMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_RewriteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save changes.
        /// </summary>
        public static string TemplateEditor_SaveChanges {
            get {
                return ResourceManager.GetString("TemplateEditor_SaveChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you want to save template values changes?.
        /// </summary>
        public static string TemplateEditor_SaveChangesMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_SaveChangesMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}
        ///by {1}.
        /// </summary>
        public static string TemplateEditor_TemplateByAuthor {
            get {
                return ResourceManager.GetString("TemplateEditor_TemplateByAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This template is an asset..
        /// </summary>
        public static string TemplateEditor_TemplateIsAsset {
            get {
                return ResourceManager.GetString("TemplateEditor_TemplateIsAsset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Templates.
        /// </summary>
        public static string TemplateEditor_Templates {
            get {
                return ResourceManager.GetString("TemplateEditor_Templates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unnamed template.
        /// </summary>
        public static string TemplateEditor_UnnamedTemplate {
            get {
                return ResourceManager.GetString("TemplateEditor_UnnamedTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply.
        /// </summary>
        public static string Tool_Apply {
            get {
                return ResourceManager.GetString("Tool_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply marking between intersections.
        /// </summary>
        public static string Tool_ApplyBetweenIntersectionsCaption {
            get {
                return ResourceManager.GetString("Tool_ApplyBetweenIntersectionsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to apply marking between intersections?.
        /// </summary>
        public static string Tool_ApplyBetweenIntersectionsMessage {
            get {
                return ResourceManager.GetString("Tool_ApplyBetweenIntersectionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply marking to whole street.
        /// </summary>
        public static string Tool_ApplyWholeStreetCaption {
            get {
                return ResourceManager.GetString("Tool_ApplyWholeStreetCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to apply marking to whole &quot;{0}&quot;?.
        /// </summary>
        public static string Tool_ApplyWholeStreetMessage {
            get {
                return ResourceManager.GetString("Tool_ApplyWholeStreetMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clear node markings.
        /// </summary>
        public static string Tool_ClearMarkingsCaption {
            get {
                return ResourceManager.GetString("Tool_ClearMarkingsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to clear all node #{0} markings?.
        /// </summary>
        public static string Tool_ClearMarkingsMessage {
            get {
                return ResourceManager.GetString("Tool_ClearMarkingsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Continue.
        /// </summary>
        public static string Tool_Continue {
            get {
                return ResourceManager.GetString("Tool_Continue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete {0}.
        /// </summary>
        public static string Tool_DeleteCaption {
            get {
                return ResourceManager.GetString("Tool_DeleteCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dependent items will also be removed:.
        /// </summary>
        public static string Tool_DeleteDependence {
            get {
                return ResourceManager.GetString("Tool_DeleteDependence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk borders - {0}.
        /// </summary>
        public static string Tool_DeleteDependenceCrosswalkBorders {
            get {
                return ResourceManager.GetString("Tool_DeleteDependenceCrosswalkBorders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks - {0}.
        /// </summary>
        public static string Tool_DeleteDependenceCrosswalks {
            get {
                return ResourceManager.GetString("Tool_DeleteDependenceCrosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers - {0}.
        /// </summary>
        public static string Tool_DeleteDependenceFillers {
            get {
                return ResourceManager.GetString("Tool_DeleteDependenceFillers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lines - {0}.
        /// </summary>
        public static string Tool_DeleteDependenceLines {
            get {
                return ResourceManager.GetString("Tool_DeleteDependenceLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rules - {0}.
        /// </summary>
        public static string Tool_DeleteDependenceRules {
            get {
                return ResourceManager.GetString("Tool_DeleteDependenceRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to delete {0} &quot;{1}&quot;?.
        /// </summary>
        public static string Tool_DeleteMessage {
            get {
                return ResourceManager.GetString("Tool_DeleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exit applying preset mode.
        /// </summary>
        public static string Tool_EndApplyPresetOrderCaption {
            get {
                return ResourceManager.GetString("Tool_EndApplyPresetOrderCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you want to apply a preset?.
        /// </summary>
        public static string Tool_EndApplyPresetOrderMessage {
            get {
                return ResourceManager.GetString("Tool_EndApplyPresetOrderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exit edit order mode.
        /// </summary>
        public static string Tool_EndEditOrderCaption {
            get {
                return ResourceManager.GetString("Tool_EndEditOrderCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you want to exit edit mode and apply changes?.
        /// </summary>
        public static string Tool_EndEditOrderMessage {
            get {
                return ResourceManager.GetString("Tool_EndEditOrderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exit paste mode.
        /// </summary>
        public static string Tool_EndPasteOrderCaption {
            get {
                return ResourceManager.GetString("Tool_EndPasteOrderCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you want to exit paste mode and apply changes?.
        /// </summary>
        public static string Tool_EndPasteOrderMessage {
            get {
                return ResourceManager.GetString("Tool_EndPasteOrderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Press {0} to enter
        ///underground mode.
        /// </summary>
        public static string Tool_EnterUnderground {
            get {
                return ResourceManager.GetString("Tool_EnterUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Press {0} to exit
        ///underground mode.
        /// </summary>
        public static string Tool_ExitUnderground {
            get {
                return ResourceManager.GetString("Tool_ExitUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a crosswalk.
        /// </summary>
        public static string Tool_InfoCreateCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoCreateCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a line.
        /// </summary>
        public static string Tool_InfoCreateLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a perpendicular line.
        /// </summary>
        public static string Tool_InfoCreateNormalLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateNormalLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a stop line.
        /// </summary>
        public static string Tool_InfoCreateStopLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateStopLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the crosswalk.
        /// </summary>
        public static string Tool_InfoDeleteCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the line.
        /// </summary>
        public static string Tool_InfoDeleteLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the perpendicular line.
        /// </summary>
        public static string Tool_InfoDeleteNormalLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteNormalLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the stop line.
        /// </summary>
        public static string Tool_InfoDeleteStopLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteStopLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to finish creating the filler.
        /// </summary>
        public static string Tool_InfoFillerClickEnd {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to select the next point in the contour.
        /// </summary>
        public static string Tool_InfoFillerClickNext {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickNext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to start creating a filler.
        /// </summary>
        public static string Tool_InfoFillerClickStart {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the next point in the contour.
        /// </summary>
        public static string Tool_InfoFillerSelectNext {
            get {
                return ResourceManager.GetString("Tool_InfoFillerSelectNext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to start creating a filler.
        /// </summary>
        public static string Tool_InfoFillerSelectStart {
            get {
                return ResourceManager.GetString("Tool_InfoFillerSelectStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Node #{0}
        ///Click to edit markings.
        /// </summary>
        public static string Tool_InfoHoverNode {
            get {
                return ResourceManager.GetString("Tool_InfoHoverNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Segment #{0}
        ///Click to edit markings.
        /// </summary>
        public static string Tool_InfoHoverSegment {
            get {
                return ResourceManager.GetString("Tool_InfoHoverSegment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Inverse order.
        /// </summary>
        public static string Tool_InfoInverseOrder {
            get {
                return ResourceManager.GetString("Tool_InfoInverseOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply.
        /// </summary>
        public static string Tool_InfoPasteApply {
            get {
                return ResourceManager.GetString("Tool_InfoPasteApply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Don&apos;t apply.
        /// </summary>
        public static string Tool_infoPasteNotApply {
            get {
                return ResourceManager.GetString("Tool_infoPasteNotApply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset.
        /// </summary>
        public static string Tool_InfoPasteReset {
            get {
                return ResourceManager.GetString("Tool_InfoPasteReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drag and drop circle to set points order.
        /// </summary>
        public static string Tool_InfoPointsDrag {
            get {
                return ResourceManager.GetString("Tool_InfoPointsDrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drop circle inside/outside target to set/unset points order.
        /// </summary>
        public static string Tool_InfoPointsDrop {
            get {
                return ResourceManager.GetString("Tool_InfoPointsDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drag and drop circles to set roads order
        ///Click circle to edit road points order.
        /// </summary>
        public static string Tool_InfoRoadsDrag {
            get {
                return ResourceManager.GetString("Tool_InfoRoadsDrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drop circle inside/outside target to set/unset roads order.
        /// </summary>
        public static string Tool_InfoRoadsDrop {
            get {
                return ResourceManager.GetString("Tool_InfoRoadsDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click with {0} to select the crosswalk.
        /// </summary>
        public static string Tool_InfoSelectCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoSelectCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select endpoint.
        /// </summary>
        public static string Tool_InfoSelectCrosswalkEndPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectCrosswalkEndPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to
        ///create or delete a crosswalk.
        /// </summary>
        public static string Tool_InfoSelectCrosswalkStartPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectCrosswalkStartPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click with {0} to select the line.
        /// </summary>
        public static string Tool_InfoSelectLine {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select endpoint for regular line.
        /// </summary>
        public static string Tool_InfoSelectLineEndPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineEndPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drag behind point for perpendicular line.
        /// </summary>
        public static string Tool_InfoSelectLineEndPointNormal {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineEndPointNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select endpoint for regular or stop line.
        /// </summary>
        public static string Tool_InfoSelectLineEndPointStop {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineEndPointStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to create or delete a line.
        /// </summary>
        public static string Tool_InfoSelectLineStartPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineStartPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hold {0} to create a crosswalk.
        /// </summary>
        public static string Tool_InfoStartCreateCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoStartCreateCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hold {0} to create a filler.
        /// </summary>
        public static string Tool_InfoStartCreateFiller {
            get {
                return ResourceManager.GetString("Tool_InfoStartCreateFiller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Drag with {0} to move the point.
        /// </summary>
        public static string Tool_InfoStartDragPointMode {
            get {
                return ResourceManager.GetString("Tool_InfoStartDragPointMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turn clockwise.
        /// </summary>
        public static string Tool_InfoTurnClockwise {
            get {
                return ResourceManager.GetString("Tool_InfoTurnClockwise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turn counter-clockwise.
        /// </summary>
        public static string Tool_InfoTurnСounterClockwise {
            get {
                return ResourceManager.GetString("Tool_InfoTurnСounterClockwise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Hold {0} to
        ///underground mode.
        /// </summary>
        public static string Tool_InfoUnderground {
            get {
                return ResourceManager.GetString("Tool_InfoUnderground", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Don&apos;t apply.
        /// </summary>
        public static string Tool_NotApply {
            get {
                return ResourceManager.GetString("Tool_NotApply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste markings.
        /// </summary>
        public static string Tool_PasteMarkingsCaption {
            get {
                return ResourceManager.GetString("Tool_PasteMarkingsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to paste markings?.
        /// </summary>
        public static string Tool_PasteMarkingsMessage {
            get {
                return ResourceManager.GetString("Tool_PasteMarkingsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset all points offset.
        /// </summary>
        public static string Tool_ResetOffsetsCaption {
            get {
                return ResourceManager.GetString("Tool_ResetOffsetsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to reset all node #{0} points offset?.
        /// </summary>
        public static string Tool_ResetOffsetsMessage {
            get {
                return ResourceManager.GetString("Tool_ResetOffsetsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Roads have changed.
        /// </summary>
        public static string Tool_RoadsWasChangedCaption {
            get {
                return ResourceManager.GetString("Tool_RoadsWasChangedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The roads at this intersection have changed, therefore the existing markings cannot be applied automatically.
        ///Do you want to apply the markings manually?.
        /// </summary>
        public static string Tool_RoadsWasChangedMessage {
            get {
                return ResourceManager.GetString("Tool_RoadsWasChangedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a node or segment to change markings.
        /// </summary>
        public static string Tool_SelectInfo {
            get {
                return ResourceManager.GetString("Tool_SelectInfo", resourceCulture);
            }
        }
    }
}
